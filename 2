#include <iostream>
#include "stdio.h"
#include "stdlib.h"
#include "time.h";
#include <vector>;
#include <list>;

using namespace std;

#define M 100 //для строк
#define N 100 //для столбцов


//функция для заполнения динамического масива массива вручную
char** simple_input_din(int m, int n) {

	char** arr = new char* [m]; //создание массива из n указателей
	for (int i = 0; i < n; i++) {
		arr[i] = new char[m]; //создание n строк из m элементов
	}
	cout << "Введите крестики/нолики в вашей матрице построчно: (крестики - 'x' в английской раскладке)" << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
		}
	}
	
	cout << endl << "Полученная матрица: " << endl;
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << arr[i][j] << " : ";
		}
		cout << endl;
	}
	return arr;
}

//функция для заполнения статического массива вручную 
void simple_input_stat(int m, int n, char(&arr)[M][N]) {

	cout << "Введите крестики/нолики в вашей матрице построчно: (крестики - 'x' в английской раскладке)" << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
		}
	}
	cout << endl << "Полученная матрица: " << endl;
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << arr[i][j] << " : ";
		}
		cout << endl;
	}
}


//функция для заполнения статического массива рандомными значениями
void random_input_stat(int m, int n, char(&arr)[M][N]) {
	int c;
	srand(time(0));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			c = rand() / 100;
			if (c % 2 == 0) {
				arr[i][j] = 'x';
			}
			else {
				arr[i][j] = 'о';
			}
		}
	}
	
	cout << endl << "Полученная матрица: " << endl;
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << arr[i][j] << " : ";
		}
		cout << endl;
	}
}


//функция для заполнения динамического массива рандомными значениями
char** random_input_din(int m, int n) {
	int c;
	char** arr = new char* [m]; //создание массива из n указателей
	for (int i = 0; i < n; i++) {
		arr[i] = new char[m]; //создание n строк из m элементов
	}
	srand(time(0));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			c = rand() / 100;
			if (c % 2 == 0) {
				arr[i][j] = 'x';
			}
			else {
				arr[i][j] = 'о';
			}
		}
	}
	cout << endl << "Полученная матрица: " << endl;
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;

	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << arr[i][j] << " : ";
		}
		cout << endl;
	}
	return arr;
}


//функция для заполнения вектора рандомными числами 
void random_input_vect(int m, int n, vector<vector<char>>& vct) {
	srand(time(0));
	int c = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			c = rand() / 100;
			if (c % 2 == 0) {
				vct[i][j] = 'x';
			}
			else {
				vct[i][j] = 'о';
			}
		}
	}
	cout << "Полученный двумерный вектор: " << endl;
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << vct[i][j] << " : ";
		}
		cout << endl;
	}
}

//функция для заполнения вектора введенными числами 
void simple_input_vect(int m, int n, vector<vector<char>>& vct) {
	cout << "Введите крестики/нолики в вашей матрице построчно: (крестики - 'x' в английской раскладке)" << endl;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> vct[i][j];
		}
	}
	cout << "     ";
	for (int i = 0; i < n; i++) {
		cout << i << " : ";
	}
	cout << endl;
	for (int i = 0; i < n; i++) {
		cout << " " << i << " : ";
		for (int j = 0; j < m; j++) {
			cout << vct[i][j] << " : ";
		}
		cout << endl;
	}
}

//функция для проверки условия для статического массива
int check_stat(char(&arr)[M][N], int m, int n) {
	bool hor_flag = false;
	bool vert_flag = false;
	bool right_diag_flag = false;
	bool left_diag_flag = false;

	int horizontal = 0;
	int vertical = 0;
	int right_diagonal = 0;
	int left_diagonal = 0;

	list <int> vert; //список с номерами вертикалей, на которых было получено >= 5 крестиков 
	list <int> hor; //cписок с номерами горизонталей, на которых было получено >= 5 крестиков 

	for (int i = 0; i < n; i++) { //по строке
		for (int j = 0; j < m; j++) {  //по столбцу


			//перебор по вертикали
			if (arr[j][i] == 'x') {
				vertical++;
			}
			else if (arr[j][i] != 'x') {
				vertical = 0;
			}

			if (vertical == 5) {
				vert_flag = true;
				vert.insert(vert.end(), i);
			}

			

			//перебор по горизонтали
			if (arr[i][j] == 'x') {
				horizontal++;
			}
			else {
				horizontal = 0;
			}

			if (horizontal >= 5) {
				hor_flag = true;
				hor.insert(hor.end(), i);
			}


			//перебор по правой диагонали
			if (i == j) {
				if (arr[i][j] == 'x') {
					right_diagonal++;
				}
				else {
					right_diagonal = 0;
				}
			}

			if ((right_diagonal >= 5) && (!right_diag_flag)) {
				right_diag_flag = true;
			}


			//перебор по левой диагонали
			if (i + j == m - 1) {
				if (arr[i][j] == 'x') {
					left_diagonal++;
				}
				else {
					left_diagonal = 0;
				}
			}

			if ((left_diagonal >= 5) && (!left_diag_flag)) {
				left_diag_flag = true;
			}
		}
		vertical = 0; //с переходом на следующий столбец переменная обнуляется, чтобы начать подсчёт уже для следующего столбца
		horizontal = 0; //c переходом на следующую строку переменная обнуляется, чтобы начать подсчет уже для следующей строки
	}

	if (hor_flag) {
		cout << endl << "Победа крестиков по горизонталям: ";
		hor.unique();
		list <int> ::iterator it;
		for (it = hor.begin(); it != hor.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}

	if (vert_flag) {
		cout << endl << "Победа крестиков по вертикалям: ";
		vert.unique();
		list <int> ::iterator it;
		for (it = vert.begin(); it != vert.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}
	
	if (right_diag_flag) {
		cout << "Победа крестиков по главной диагонали." << endl;
	}
	if (left_diag_flag) {
		cout << "Победа крестиков по побочной диагонали." << endl;
	}
	if ((!hor_flag) && (!vert_flag) && (!right_diag_flag) && (!left_diag_flag)) {
		cout << "В этой игре крестики не одержали победу" << endl;
	}
	return 0;
}

//функция проверки условия для динамического массива 
int check_din(char** arr, int m, int n) {
	bool hor_flag = false;
	bool vert_flag = false;
	bool right_diag_flag = false;
	bool left_diag_flag = false;

	int horizontal = 0;
	int vertical = 0;
	int right_diagonal = 0;
	int left_diagonal = 0;

	list <int> vert; //список с номерами вертикалей, на которых было получено >= 5 крестиков 
	list <int> hor; //cписок с номерами горизонталей, на которых было получено >= 5 крестиков 

	for (int i = 0; i < n; i++) { //по строке
		for (int j = 0; j < m; j++) {  //по столбцу


			//перебор по вертикали
			if (arr[j][i] == 'x') {
				vertical++;
			}
			else if (arr[j][i] != 'x') {
				vertical = 0;
			}

			if (vertical == 5) {
				vert_flag = true;
				vert.insert(vert.end(), i);
			}



			//перебор по горизонтали
			if (arr[i][j] == 'x') {
				horizontal++;
			}
			else {
				horizontal = 0;
			}

			if (horizontal >= 5) {
				hor_flag = true;
				hor.insert(hor.end(), i);
			}


			//перебор по правой диагонали
			if (i == j) {
				if (arr[i][j] == 'x') {
					right_diagonal++;
				}
				else {
					right_diagonal = 0;
				}
			}

			if ((right_diagonal >= 5) && (!right_diag_flag)) {
				right_diag_flag = true;
			}


			//перебор по левой диагонали
			if (i + j == m - 1) {
				if (arr[i][j] == 'x') {
					left_diagonal++;
				}
				else {
					left_diagonal = 0;
				}
			}

			if ((left_diagonal >= 5) && (!left_diag_flag)) {
				left_diag_flag = true;
			}
		}
		vertical = 0; //с переходом на следующий столбец переменная обнуляется, чтобы начать подсчёт уже для следующего столбца
		horizontal = 0; //c переходом на следующую строку переменная обнуляется, чтобы начать подсчет уже для следующей строки
	}

	if (hor_flag) {
		cout << endl << "Победа крестиков по горизонталям: ";
		hor.unique();
		list <int> ::iterator it;
		for (it = hor.begin(); it != hor.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}

	if (vert_flag) {
		cout << endl << "Победа крестиков по вертикалям: ";
		vert.unique();
		list <int> ::iterator it;
		for (it = vert.begin(); it != vert.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}

	if (right_diag_flag) {
		cout << "Победа крестиков по главной диагонали." << endl;
	}
	if (left_diag_flag) {
		cout << "Победа крестиков по побочной диагонали." << endl;
	}
	if ((!hor_flag) && (!vert_flag) && (!right_diag_flag) && (!left_diag_flag)) {
		cout << "В этой игре крестики не одержали победу" << endl;
	}
	return 0;
}

//функция для проверки условия для вектора
int check_vect(vector<vector<char>> vct, int m, int n) {
	bool hor_flag = false;
	bool vert_flag = false;
	bool right_diag_flag = false;
	bool left_diag_flag = false;

	int horizontal = 0;
	int vertical = 0;
	int right_diagonal = 0;
	int left_diagonal = 0;

	list <int> vert; //список с номерами вертикалей, на которых было получено >= 5 крестиков 
	list <int> hor; //cписок с номерами горизонталей, на которых было получено >= 5 крестиков 

	for (int i = 0; i < n; i++) { //по строке
		for (int j = 0; j < m; j++) {  //по столбцу


			//перебор по вертикали
			if (vct[j][i] == 'x') {
				vertical++;
			}
			else if (vct[j][i] != 'x') {
				vertical = 0;
			}

			if (vertical == 5) {
				vert_flag = true;
				vert.insert(vert.end(), i);
			}



			//перебор по горизонтали
			if (vct[i][j] == 'x') {
				horizontal++;
			}
			else {
				horizontal = 0;
			}

			if (horizontal >= 5) {
				hor_flag = true;
				hor.insert(hor.end(), i);
			}


			//перебор по правой диагонали
			if (i == j) {
				if (vct[i][j] == 'x') {
					right_diagonal++;
				}
				else {
					right_diagonal = 0;
				}
			}

			if ((right_diagonal >= 5) && (!right_diag_flag)) {
				right_diag_flag = true;
			}


			//перебор по левой диагонали
			if (i + j == m - 1) {
				if (vct[i][j] == 'x') {
					left_diagonal++;
				}
				else {
					left_diagonal = 0;
				}
			}

			if ((left_diagonal >= 5) && (!left_diag_flag)) {
				left_diag_flag = true;
			}
		}
		vertical = 0; //с переходом на следующий столбец переменная обнуляется, чтобы начать подсчёт уже для следующего столбца
		horizontal = 0; //c переходом на следующую строку переменная обнуляется, чтобы начать подсчет уже для следующей строки
	}

	if (hor_flag) {
		cout << endl << "Победа крестиков по горизонталям: ";
		hor.unique();
		list <int> ::iterator it;
		for (it = hor.begin(); it != hor.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}

	if (vert_flag) {
		cout << endl << "Победа крестиков по вертикалям: ";
		vert.unique();
		list <int> ::iterator it;
		for (it = vert.begin(); it != vert.end(); it++) {
			cout << (*it) << " : ";
		}
		cout << endl;
	}

	if (right_diag_flag) {
		cout << "Победа крестиков по главной диагонали." << endl;
	}
	if (left_diag_flag) {
		cout << "Победа крестиков по побочной диагонали." << endl;
	}
	if ((!hor_flag) && (!vert_flag) && (!right_diag_flag) && (!left_diag_flag)) {
		cout << "В этой игре крестики не одержали победу" << endl;
	}
	return 0;
}


int main() {
	setlocale(LC_ALL, "rus");
	int m, n; //строки, столбцы

	cout << "Введите количество строк и столбцов массива: : ";
	cin >> n >> m;

	if ((m < 5) || (n < 5)) {
		cout << "В этой игре условие победы невыполнимо" << endl << "Конец!" << endl;
		return 0;

	}

	int Q; //выбор типа массива 
	cout << "Выберите тип массива для работы: " << endl << "1 - статический массив;" << endl << "2 - динамический массив; " << endl << "3 - вектор;" << endl << "Ввод: ";
	cin >> Q;

	if (Q == 1) {

		//статический массив

		char arr[M][N];

		int W; //выбор типа ввода
		cout << "Выберите тип ввода: " << endl << "1 - ручной ввод; " << endl << "2 - случайная генерация" << endl << "Ввод: ";
		cin >> W;
		if (W == 1) {
			simple_input_stat(m, n, arr);
		}
		else {
			random_input_stat(m, n, arr);
		}
		check_stat(arr, m, n);
	}
	else if (Q == 2) {

		//динамический массив 

		int E; //выбор типа ввода
		cout << endl << "Выберите тип ввода: " << endl << "1 - ручной ввод; " << endl << "2 - случайная генерация" << endl << "Ввод: ";
		cin >> E;
		if (E == 1) {
			char** arr = simple_input_din(m, n);
			check_din(arr, n, m);
		}
		else {
			char** arr = random_input_din(m, n);
			check_din(arr, n, m);
		}
	}
	else {

		//вектор


		vector<vector<char>> vct(n, vector<char>(m));
		int R; //выбор типа ввода
		cout << endl << "Выберите тип ввода: " << endl << "1 - ручной ввод; " << endl << "2 - случайная генерация" << endl << "Ввод: ";
		cin >> R;
		if (R == 1) {
			simple_input_vect(m, n, vct);
		}
		else {
			random_input_vect(m, n, vct);
		}
		check_vect(vct, m, n);
	}
}


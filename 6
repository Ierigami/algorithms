
#include <iostream>
using namespace std;

void get_max(int* arr, int n) {
    int mx = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] > mx) mx = arr[i];
    }
    cout << "Наибольший элемент массива - " << mx;
}
int findMax(int arr[], int n, int index, int max) {
    if (index == n) {
        return max;
    }
    if (arr[index] > max) {
        max = arr[index];
    }
    return findMax(arr, n, index + 1, max);
}

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int _data) : data(_data), next(nullptr) {} //конструктор
};

struct list {
    Node* head; //указатель на первый объект 
    Node* tail; //указатель на последний объект 
    list() : head(nullptr), tail(nullptr) {} //конструктор

    bool is_empty() {
        return head == nullptr;
    };

    void push_back(int data) { //добавляет 1 элемент в конец списка
        Node* node = new Node(data); //создаем новый элемент списка (текущий)
        if (head == nullptr) { //если список пустой, текущий элемент становится первым
            head = node;
            tail = node;
            return;
        }
        if (tail != nullptr) tail->next = node; //если последний элемент != null то после него вставляем текущий.
        tail = node; // переопределение последнего элемента tail.
    };


    void print_list() {
        if (is_empty()) {
            return;
        }
        Node* node = head;
        while (node) {
            cout << node->data << " : ";
            node = node->next;
        }
        cout << endl;
    };

};

//void create_list(list& first) {
//    cout << "Введите количество элементов списка : ";
//    int len;
//    char d;
//    cin >> len;
//    if (len <= 0) {
//        return;
//    }
//
//    cout << "Введите в строку исходное количество элементов списка : ";
//    for (int i = 0; i < len; i++) {
//        cin >> d;
//        first.push_back(d);
//    };
//}

void equeue(Node*& head, int data) {
    if (head == nullptr){
        //head = new Node(data);
        Node* node = new Node(data);
        head = node;
        }
    else
        equeue(head->next, data);

}

void del_first(list& L) { //функция удаления первого элемента
    if (L.head == NULL) return;
    if (L.head == L.tail) {
        delete L.tail;
        L.head = L.tail = NULL;
        cout << "Список удален!";
        return;
    }
    Node* node = L.head;
    L.head = node->next;
    L.print_list();
    del_first(L);
};


int main() {
 
    setlocale(LC_ALL, "Rus");
   /* int n;
    cout << "Введите размер массива: ";
    cin >> n;
    int* arr = new int[n];
    cout << endl << "Введите элементы массива в строчку: ";
    for (int i = 0; i <= n; i++) {
        int k;
        cin >> k;
        arr[i] = k;
    }
    int max = arr[0];
    n++;
    max = findMax(arr, n, 0, max);
    cout << max;*/

    //get_max(arr, n);

    list L1;
    int data;
    while (true) {
        cin >> data;
        if (data == -1)
            break;
        else {
            equeue(L1.head, data);
        }
    }
    L1.print_list();
    del_first(L1);
}


    

    
    

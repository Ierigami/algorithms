#include <iostream>
#include <stdlib.h>
#include "stdio.h"
#include <string.h>
#include <windows.h>
#include <vector>
#include <string>
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable:4996)
#endif


using namespace std;

void slova1(char* s, int len, char* s1, int len1)
{
	char slovo[20]; //слово из первого массива
	for (int k = 0; k < 20; k++)
		slovo[k] = '\0';
	char sec_word[20]; //слово из второго массива 
	for (int k = 0; k < 20; k++)
		sec_word[k] = '\0';
	int i, j, k, l; i = 0; j = 0; k = 0; l = 0;

	//i - переменная полного прохода по первому массиву, j - переменная полного прохода по второму массиву, 
	//k - переменная для добавления слова в slovo, l - переменная для добавления второго слова в sec_word
	while (i<len)	//пока первый массив не закончен
	{
		k = 0; //каждый раз слово вводим в slovo с нулевого индекса 
		
		while ((s[i] != ' ' )&&( s[i] != '\0')) { //пока в первом массиве не закончилось первое слово
			slovo[k] = s[i]; //добавляем первое слово в slovo
			i++; k++;
		}
		//puts(sec_word);
		cout << slovo << ": ";
		j = 0; //обнулим j, так как каждый раз второй массив проходится сначала

		while (j<len1) {	//пока второй массив не закончен

			l = 0; //кажждый раз вводим в sec_word слово с нулевого индекса
			
			while (s1[j] != ' ' && s1[j] != '\0') {  //пока не найдено первое слово второго массива
				sec_word[l] = s1[j];
				l++; j++;
			}
			
			
			if (strcmp(slovo, sec_word) == 0) {
				//puts(slovo);
				cout << sec_word << " ";
			}

			for (int k = 0; k < 20; k++)
				sec_word[k] = '\0';
			j++;
		}
		cout << endl;
		i++;
		for (int k = 0; k < 20; k++)
			slovo[k] = '\0';
	}
}

void find_common_words(string sentence1, string sentence2) {
	vector<string> words1, words2, common_words; //words1 - слова первого массива, words2 - слова второго, common_word - вектор общих слов

	// разбиваем предложения на слова
	string word = "";
	for (int i = 0; i < sentence1.length(); i++) {
		if (sentence1[i] == ' ') {
			words1.push_back(word);
			word = "";
		}
		else {
			word += sentence1[i];
		}
	}
	words1.push_back(word);

	word = "";
	for (int i = 0; i < sentence2.length(); i++) {
		if (sentence2[i] == ' ') {
			words2.push_back(word);
			word = "";
		}
		else {
			word += sentence2[i];
		}
	}
	words2.push_back(word);

	// находим общие слова(сравнение векторов)
	for (int i = 0; i < words1.size(); i++) {
		for (int j = 0; j < words2.size(); j++) {
			if (words1[i] == words2[j]) {
				common_words.push_back(words1[i]); 
			}
		}
	}

	// выводим результат
	if (common_words.size() > 0) {
		cout << "Общие слова: ";
		for (int i = 0; i < common_words.size(); i++) {
			cout << common_words[i] << " ";
		}
		cout << endl;
	}
	else {
		cout << "Общих слов нет" << endl;
	}
}

int main()
{
	setlocale(0, "");
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	int Q;

	cout << "Введите 1, если задача на массив строк: 2,если задача на контейнер string: ";
	cin >> Q;
	
	if (Q == 1) {
		char s[80];
		char s1[80];

		cout << "Введите первое предложение до переноса на следующую строку:" << endl;
		gets_s(s);

		cout << "Введите второе предложение до переноса на следующую строку:" << endl;
		gets_s(s1);

		slova1(s, strlen(s), s1, strlen(s1));
	}
	if (Q == 2) {
		string sentence1;
		string sentence2;

		cout << "Введите первое предложение до переноса на следующую строку:" << endl;

		getline(cin, sentence1);

		cout << "Введите второе предложение до переноса на следующую строку:" << endl;

		getline(cin, sentence2);
		find_common_words(sentence1, sentence2);
	}
}
